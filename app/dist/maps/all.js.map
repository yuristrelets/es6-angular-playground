{"version":3,"sources":["modules/Core/module.js","modules/Core/controllers/Core.js","modules/Core/controllers/New.js","modules/Core/directives/Dd.js","lib.js","app.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtlHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"all.js","sourcesContent":["import lib from 'lib';\r\n\r\nimport CoreController from './controllers/Core';\r\n//import NewController from './controllers/New';\r\nimport DD from './directives/Dd';\r\n\r\n\r\n\r\n\r\nclass DDD extends DD {\r\n  init() {\r\n    super.init();\r\n\r\n    this.config.name = 'qwerty';\r\n  }\r\n}\r\n\r\n/*\r\nexport default lib.defineModule('Core', {\r\n  depts: [],\r\n  config: [],\r\n  controllers: [CoreController],\r\n  directives: [],\r\n  filters: [],\r\n  factories: [],\r\n  resources: [],\r\n  services: []\r\n});*/\r\n\r\nvar core = angular.module('Core', []);\r\ncore.z.controller(CoreController);\r\ncore.z.directive(DDD);\r\n\r\nexport default core;","import {Controller} from 'lib';\r\n\r\nclass Core extends Controller {\r\n  static get $conf() {\r\n    return {\r\n      name: 'CoreController',\r\n      inject: ['$rootScope', '$http'],\r\n      resolve: {}\r\n    }\r\n  }\r\n\r\n  init() {\r\n    console.log('-> hello', this);\r\n\r\n    this.qwerty = 'qwerty222';\r\n  }\r\n\r\n  ccc() {\r\n    return 'cool55!';\r\n  }\r\n}\r\n\r\nexport default Core;","import {Controller} from 'lib';\r\n\r\nclass New extends Controller {\r\n  static get $conf() {\r\n    return {\r\n      name: 'NewController',\r\n      inject: ['$rootScope', '$q'],\r\n      resolve: {}\r\n    }\r\n  }\r\n\r\n  init() {\r\n    console.log('-> hello new', this);\r\n  }\r\n}\r\n\r\nexport default New;","import {Controller} from 'lib';\r\nimport {Directive} from 'lib';\r\n\r\nclass Ctrl extends Controller {\r\n  static get $conf() {\r\n    return {\r\n      inject: ['$http']\r\n    }\r\n  }\r\n\r\n  init() {\r\n    console.log('-> dir controller hello', this);\r\n  }\r\n}\r\n\r\nlet x = Ctrl;\r\n\r\nclass Ctrl222 extends x {\r\n\r\n}\r\n\r\nclass DD extends Directive {\r\n  init() {\r\n    this.config = {\r\n      name: 'myDir',\r\n      restrict: 'E',\r\n      scope: true,\r\n      replace: true,\r\n      template: '<div class=\"qwerty\">wfwefwef</div>',\r\n      ctrl: Ctrl222\r\n    }\r\n  }\r\n\r\n  link(scope, el, attrs) {\r\n    console.log(this);\r\n\r\n    this.calc();\r\n\r\n    el.on('click', () => {\r\n      alert('!!!');\r\n    });\r\n  }\r\n\r\n  calc() {\r\n    console.log('calc');\r\n  }\r\n}\r\n\r\nexport default DD;","if(!angular) throw('Angular is undefined!');\r\n\r\nvar originalModule = angular.module;\r\n\r\nangular.module = (name, reqs, fn) => {\r\n  console.log(name, reqs, fn);\r\n\r\n  let result = originalModule(name, reqs, fn);\r\n\r\n  result.z = {\r\n    controller(ctrl) {\r\n      if(!ctrl || !ctrl.$conf) {\r\n        throw new Error('Bad controller class!');\r\n      }\r\n\r\n      console.dir(ctrl.annotate);\r\n      console.log('-> ctrl', ctrl.$conf.name, ctrl.annotate);\r\n\r\n      return result.controller(ctrl.$conf.name, ctrl.annotate);\r\n    },\r\n\r\n    directive: function(cls) {\r\n      let dir = new cls();\r\n      let fn = () => { return dir.config; };\r\n\r\n      return result.directive(dir.name, [fn]);\r\n    }\r\n  };\r\n\r\n  return result;\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction defineApp(name, depts = [], internalDepts = []) {\r\n  for(let dept of internalDepts) {\r\n    if(dept.name) {\r\n      depts.push(dept.name);\r\n    } else {\r\n      throw('Name property not found in dependencies!');\r\n    }\r\n  }\r\n\r\n  let app = angular.module(name, depts);\r\n\r\n\r\n  angular.element(document).ready(() => {\r\n    angular.bootstrap(document, [ app.name ]);\r\n  });\r\n\r\n\r\n}\r\n\r\nfunction defineController(ctrl, to) {\r\n  let c = ctrl.$conf;\r\n  let inject = Array.prototype.concat(\"$scope\", c.inject, ctrl);\r\n\r\n  console.log(inject);\r\n\r\n  to.controller(c.name, inject);\r\n}\r\n\r\nfunction defineModule(name, options = {}) {\r\n  var m = angular.module(name, options.depts || []);\r\n\r\n  if(options.controllers) {\r\n    for(let controller of options.controllers) {\r\n      //defineController(controller, m);\r\n      controller.register(m);\r\n    }\r\n  }\r\n\r\n  return {\r\n    name: name\r\n  }\r\n}\r\n\r\nexport default { defineApp: defineApp, defineModule: defineModule };\r\n\r\nexport\r\nclass Controller {\r\n  constructor(...args) {\r\n    let c = ['$scope'].concat(this.constructor.$conf.inject);\r\n    console.log(this.constructor.$conf.name, c);\r\n\r\n    for(let i = 0, size = args.length; i < size; i++) {\r\n      this[`$${c[i].replace('$','')}`] = args[i];\r\n    }\r\n\r\n    this.init();\r\n  }\r\n\r\n  init() {}\r\n\r\n  static get annotate() {\r\n    let\r\n      reqs = this.$conf.inject,\r\n      baseReqs = ['$scope'];\r\n\r\n    return Array.isArray(reqs) ? baseReqs.concat(reqs, this) : baseReqs.concat(this);\r\n  }\r\n}\r\n\r\nexport\r\nclass Directive {\r\n  constructor() {\r\n    console.log('-> dir hello!');\r\n\r\n    this.init();\r\n\r\n    if(this.config) {\r\n      this.name = this.config.name;\r\n      console.log('-> dir ctrl', this.config.controller.$conf);\r\n      this.config.link = this.link.bind(this);\r\n      this.config.controller = this.config.controller.annotate;\r\n\r\n\r\n    }\r\n  }\r\n}","import CoreModule from './modules/Core/module';\r\n\r\nimport lib from './lib';\r\n//lib.defineApp('app', [], [CoreModule]);\r\n\r\nangular.module('app', [CoreModule.name]);\r\n\r\nangular.element(document).ready(() => {\r\n  angular.bootstrap(document, ['app'], { strictDi: true });\r\n});"],"sourceRoot":"/source/"}