{"version":3,"sources":["modules/Core/module.js","modules/Core/controllers/Core.js","modules/Core/controllers/New.js","modules/Core/directives/Dd.js","lib.js","app.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"all.js","sourcesContent":["//import lib from 'lib';\n\n//import CoreController from './controllers/Core';\n//import NewController from './controllers/New';\n//import DD from './directives/Dd';\n\nimport {Module} from 'lib';\nimport {Controller} from 'lib';\n\nclass CoreModule extends Module {}\n\nclass CoreController extends Controller {\n  static get $meta() {\n    return {\n      di: ['$http']\n    }\n  }\n}\n\n\n\nvar m = new CoreModule('Core');\n\nm.controller(CoreController);\n\n\n\n\n/*var core = angular.module('Core', []);\ncore.z.controller(CoreController);\ncore.z.directive(DD);*/\n\nexport default m;","import {Controller} from 'lib';\n\nclass Core extends Controller {\n  static get $conf() {\n    return {\n      name: 'CoreController',\n      inject: ['$rootScope', '$http'],\n      resolve: {}\n    }\n  }\n\n  init() {\n    console.log('-> hello', this);\n\n    this.qwerty = 'qwerty222';\n  }\n\n  ccc() {\n    return 'cool55!';\n  }\n}\n\nexport default Core;","import {Controller} from 'lib';\n\nclass New extends Controller {\n  static get $conf() {\n    return {\n      name: 'NewController',\n      inject: ['$rootScope', '$q'],\n      resolve: {}\n    }\n  }\n\n  init() {\n    console.log('-> hello new', this);\n  }\n}\n\nexport default New;","import {Controller} from 'lib';\nimport {Directive} from 'lib';\n\nclass Ctrl extends Controller {\n  static get $conf() {\n    return {\n      inject: ['$http']\n    }\n  }\n\n  init() {\n    console.log('-> dir controller hello', this);\n  }\n}\n\nlet x = Ctrl;\n\nclass Ctrl222 extends x {\n\n}\n\nclass DD extends Directive {\n  init() {\n    this.config = {\n      name: 'myDir',\n      restrict: 'E',\n      scope: true,\n      replace: true,\n      template: '<div class=\"qwerty\">wfwefwef</div>',\n      ctrl: Ctrl\n    }\n  }\n\n  link(scope, el, attrs) {\n    console.log(this);\n\n    this.calc();\n\n    el.on('click', () => {\n      alert('!!!');\n    });\n  }\n\n  calc() {\n    console.log('calc');\n  }\n}\n\nexport default DD;","if(!angular) throw('Angular is undefined!');\n\nvar _app;\nvar _modules = [];\n\nclass Router {\n\n}\n\nexport class Controller {\n  constructor() {\n\n  }\n\n  init() {}\n\n  static get $meta() {\n    return {\n      di: [],\n      route: '',\n      resolve: {}\n    }\n  }\n\n  static get $di() {\n    return ['$scope'].concat(this.constructor.$meta.di || []);\n  }\n\n  static $init() {\n    let me = this.constructor;\n\n    console.dir(this);\n  }\n\n  static $export() {\n    return this.constructor.$di.concat(this);\n  }\n}\n\nexport class Module {\n  constructor(name, reqs = []) {\n    this.module = angular.module(name, reqs);\n\n    _modules.push(this);\n  }\n\n  controller(ctrl) {\n    let conf = ctrl.$meta;\n\n    console.log('controller', conf);\n    console.log(ctrl.name);\n\n    ctrl.$init();\n\n    //this.module.controller(conf.name, ctrl.$export());\n  }\n\n  run(runner) {\n\n  }\n}\n\nexport class Application {\n  constructor(name, reqs) {\n    this.name = name;\n    this.reqs = reqs;\n  }\n\n  run() {\n    this.app = angular.module(this.name, this.reqs);\n\n    _app = this;\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\nvar originalModule = angular.module;\n\nangular.module = (name, reqs, fn) => {\n  console.log(name, reqs, fn);\n\n  let result = originalModule(name, reqs, fn);\n\n  result.z = {\n    controller(ctrl) {\n      if(!ctrl || !ctrl.$conf) {\n        throw new Error('Bad controller class!');\n      }\n\n      console.dir(ctrl.annotate);\n      console.log('-> ctrl', ctrl.$conf.name, ctrl.annotate);\n\n      return result.controller(ctrl.$conf.name, ctrl.annotate);\n    },\n\n    directive: function(cls) {\n      let dir = new cls();\n      let fn = () => { return dir.config; };\n\n      return result.directive(dir.name, [fn]);\n    }\n  };\n\n  return result;\n};\n\n\n\n\n\n\nfunction defineApp(name, depts = [], internalDepts = []) {\n  for(let dept of internalDepts) {\n    if(dept.name) {\n      depts.push(dept.name);\n    } else {\n      throw('Name property not found in dependencies!');\n    }\n  }\n\n  let app = angular.module(name, depts);\n\n\n  angular.element(document).ready(() => {\n    angular.bootstrap(document, [ app.name ]);\n  });\n\n\n}\n\nfunction defineController(ctrl, to) {\n  let c = ctrl.$conf;\n  let inject = Array.prototype.concat(\"$scope\", c.inject, ctrl);\n\n  console.log(inject);\n\n  to.controller(c.name, inject);\n}\n\nfunction defineModule(name, options = {}) {\n  var m = angular.module(name, options.depts || []);\n\n  if(options.controllers) {\n    for(let controller of options.controllers) {\n      //defineController(controller, m);\n      controller.register(m);\n    }\n  }\n\n  return {\n    name: name\n  }\n}\n\nexport default { defineApp: defineApp, defineModule: defineModule };\n\nexport\nclass Controller {\n  constructor(...args) {\n    console.log(this.constructor);\n    let c = ['$scope'].concat(this.constructor.$conf.inject);\n\n    for(let i = 0, size = args.length; i < size; i++) {\n      this[`$${c[i].replace('$','')}`] = args[i];\n    }\n\n    this.init();\n  }\n\n  init() {}\n\n  static get annotate() {\n      console.log('==================');\n      console.dir(this);\n    let\n      reqs = this.$conf.inject,\n      baseReqs = ['$scope'];\n\n    return Array.isArray(reqs) ? baseReqs.concat(reqs, this) : baseReqs.concat(this);\n  }\n}\n\nexport\nclass Directive {\n  constructor() {\n    console.log('-> dir hello!');\n\n    this.init();\n\n    if(this.config) {\n      this.name = this.config.name;\n      console.log('-> dir ctrl', this.config.controller.$conf);\n      this.config.link = this.link.bind(this);\n      this.config.controller = this.config.controller.annotate;\n\n\n    }\n  }\n}*/","import CoreModule from './modules/Core/module';\n\nimport lib from './lib';\n//lib.defineApp('app', [], [CoreModule]);\n\nangular.module('app', [CoreModule.name]);\n\nangular.element(document).ready(() => {\n  angular.bootstrap(document, ['app'], { strictDi: true });\n});"],"sourceRoot":"/source/"}